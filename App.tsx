import React from 'react';
import { Section } from './components/Section';
import { CodeBlock } from './components/CodeBlock';
import { DirectoryTree } from './components/DirectoryTree';
import { Header } from './components/Header';
import { BuildInstructions } from './components/BuildInstructions';
import {
  REQUIREMENTS_TXT,
  PYTHON_SCRIPT,
  PYINSTALLER_COMMAND,
  PYINSTALLER_EXPLANATION,
  USAGE_INSTRUCTIONS,
  USAGE_EXPLANATION,
  PROJECT_STRUCTURE
} from './constants';
import { ChatWidget } from './components/ChatWidget';

const App: React.FC = () => {
  return (
    <div className="bg-gray-900 min-h-screen font-sans text-gray-300">
      <Header />
      <main className="max-w-4xl mx-auto px-4 py-8">
        <Section title="1. Final Project Directory Structure">
          <p className="mb-4">
            Before packaging, your project should be organized as follows. This structure cleanly separates your code, dependencies, and model assets.
          </p>
          <DirectoryTree structure={PROJECT_STRUCTURE} />
        </Section>

        <Section title="2. The requirements.txt File">
          <p className="mb-4">
            This file lists all the Python libraries needed to run the script. Using `monai[all]` ensures that necessary backends like `itk-python` for NIfTI I/O are included.
          </p>
          <CodeBlock language="text" code={REQUIREMENTS_TXT} />
        </Section>

        <Section title="3. The Core Python Script (run_segmenter.py)">
          <p className="mb-4">
            This is the heart of your tool. It handles argument parsing, device selection (CPU/GPU), loading the model, pre-processing the input image, running inference, and saving the output mask. The `resource_path` function is crucial for PyInstaller to find the bundled `brain_tumor_model.pth` file at runtime.
          </p>
          <CodeBlock language="python" code={PYTHON_SCRIPT} />
        </Section>

        <Section title="4. The PyInstaller Build Command">
          <p className="mb-4">
            This command tells PyInstaller how to build your executable. It specifies the entry-point script, bundles the model weights as a data file, and packages everything into a single file.
          </p>
          <CodeBlock language="bash" code={PYINSTALLER_COMMAND} />
          <div className="mt-4 prose prose-invert prose-sm text-gray-400">
            <ul>
              {PYINSTALLER_EXPLANATION.map((item, index) => (
                <li key={index}>
                  <strong className="text-cyan-400">{item.flag}</strong>: {item.desc}
                </li>
              ))}
            </ul>
          </div>
        </Section>

        <Section title="5. Step-by-Step Build Instructions">
          <BuildInstructions />
        </Section>

        <Section title="6. Usage Instructions for the End-User">
          <p className="mb-4">
            Once built, the tool can be run from the command line. The user provides the input NIfTI file and specifies a path for the output segmentation mask.
          </p>
          <CodeBlock language="bash" code={USAGE_INSTRUCTIONS} />
          <p className="mt-4 text-gray-400">
            {USAGE_EXPLANATION}
          </p>
        </Section>
      </main>
      <footer className="text-center py-6 text-gray-500 text-sm">
        <p>Generated by a world-class senior frontend React engineer.</p>
      </footer>
      <ChatWidget />
    </div>
  );
};

export default App;